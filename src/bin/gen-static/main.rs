mod spec;

use spec::STATIC_TABLE;

use std::io::{self, Write};

fn main() -> io::Result<()> {
    let table = gen_table();
    println!("{}", table);

    if let Some(path) = std::env::args().nth(1) {
        let mut fd = std::fs::File::create(&path)?;
        fd.write_all(b"// generated by `cargo run --bin gen-static`\n")?;
        fd.write_all(b"#[rustfmt::skip]\n")?;
        fd.write_all(table.as_bytes())?;
        fd.sync_all()?;

        println!("written to {}", path);
    }

    Ok(())
}

fn gen_table() -> String {
    let mut lines = STATIC_TABLE.lines().skip(3);

    let mut table = String::from("pub const STATIC_TABLE: [(&[u8], &[u8]); 99] = [\n");
    let mut field = String::new();

    // some entries span multiple lines
    while let Some(line) = lines.next() {
        if line.starts_with('|') {
            let name = &line[9..43].trim();
            let value = &line[44..67].trim();

            if name.is_empty() {
                // continuation of field

                if !field.is_empty() && field.chars().last().unwrap() == ';' {
                    field.push(' ');
                }

                field.push_str(value);
            } else {
                // start of new field

                if !field.is_empty() {
                    field.push_str("\"),\n");
                    table.push_str(&field);
                    field.clear();
                }

                name.to_string().push_str("\",");

                field.push_str(&format!(r#"    (b"{:<36} b"{}"#, name, value));
            }
        }
    }

    field.push_str("\"),\n");
    table.push_str(&field);

    table.push_str("];\n");

    table
}

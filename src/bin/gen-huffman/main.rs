mod context;
mod spec;

use context::Context;
use spec::HUFFMAN_TABLE;

use std::collections::VecDeque;
use std::io::{self, Write};

fn main() -> io::Result<()> {
    let (encode, decode) = gen_tables();

    println!("{}", encode);
    println!("{}", decode);

    if let Some(path) = std::env::args().nth(1) {
        let mut fd = std::fs::File::create(&path)?;

        fd.write_all(b"// generated by `cargo run --bin gen-huffman`\n")?;

        fd.write_all(b"\n// (bit-len, code)\n")?;
        fd.write_all(encode.as_bytes())?;

        fd.write_all(b"\n// (state, symbol)\n")?;
        fd.write_all(decode.as_bytes())?;

        fd.sync_all()?;

        println!("written to {}", path);
    }

    Ok(())
}

fn gen_tables() -> (String, String) {
    let mut lines = HUFFMAN_TABLE.lines().skip(2);

    let mut encode = String::from("pub const ENCODE_TABLE: [(usize, u64); 257] = [\n");
    let mut ctx = Context::new();

    while let Some(line) = lines.next() {
        let (sym, mut code_as_bits, code_as_hex, len) = parse(line);

        encode.push_str(&format!("    ({}, 0x{}),\n", len, code_as_hex));

        // rebuild prefix tree
        ctx.add(sym, &mut code_as_bits);
    }

    encode.push_str("];\n");
    let decode = ctx.to_decode();

    (encode, decode)
}

fn parse(line: &str) -> (usize, VecDeque<bool>, &str, usize) {
    let sym = line[5..8].trim();
    let bits = line[11..50].trim();
    let hex = line[50..61].trim();
    let len = line[62..64].trim();

    let mut vec = VecDeque::new();

    for bit in bits.chars() {
        match bit {
            '0' => vec.push_back(false),
            '1' => vec.push_back(true),
            _ => {}
        }
    }

    (sym.parse().unwrap(), vec, hex, len.parse().unwrap())
}
